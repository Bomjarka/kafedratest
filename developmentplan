# План разработки

1. Изменить проверку авторизации не по проверке пароля, а по проверке hash 
    1.1. Внедрить метод шифровки toHash в класс Validate Service при помощи Companion object
    1.2. В классе User.kt создать внутренние поля hash и salt и инициализировать их при помощи метода toHash 
    1.3. В классе ValidateService проверять соответствие user.hash и введённого пароля 
2. Для выполнения требования R1.5 определить возможные роли пользователей, а так же добавить ресурсы, к которым у них есть доступ
    2.1. read, write, execute, хранить данные роли в enum классе
    2.2. Создать класса UserRole.kt, в котором будем хранить поля UserRole (user: User, resource: String, role: Role)
    2.3. Создать класс ChecUserkRole, который будет проверять обладает ли пользователь указанными в строке правами
    2.4. Создать метод getUser, который будет получать информацию о пользователе если первичная авторизация (-login -pass) проходит успешно
    2.5. Создать метод isRole внутри класса CheckUserRole, который будет проверять наличие у пользователя прав
3. Проверять количество входящих параметров строки
    3.1. Добавить библиотеку kotlin.cli 
    3.2. Изменить класс params и хранить в нём параметры при помощи библиотеки 
    3.3. Метод isHelp так же будет возвращать true/false в loginpass.kt
4. Ресурсы
    4.1. Все ресурсы будет считать существующими
    4.2. Любой набор символов после –res является существующим путём
    4.3. Исходя из предыдущих пунктов, нам не нужно создавать и хранить список всех существующих ресурсов
    4.4. Доступ к определённому ресурсу даёт доступ к его потомкам
5. Параметры полей
    5.1. –res “String”
    5.2. –role “String”
6. Коды возврата
    6.1. В классе CheckUserRole.kt  добавим метод findRole, который будет проверять существует ли указанная роль и возвращать true/false, если false, то в loginpass передадим в exitCode 5 – неизвестная роль
    6.2. Метод isRole из класса CheckUserRole будет проверять соответствие введённой роли и возвращать true/false, если false, то в loginpass передадим в exitCode 6 – нет доступа
7. Тестовые строки (правильность логина и пароля не проверяем)
    7.1. –login Admin –res A.B.CD – role write – код 0
    7.2. –res A.BC – login User1 – role read – код 0
    7.3. –role execute –res CD.E.B – login Admin – код 0
    7.4. –login User1 – res A – role delete – код 5
    7.5. –login Admin –res B.C – role write – код 6 (у пользователя Admin нет доступа к B.C в поле resource класса User.kt хардкод)
  



