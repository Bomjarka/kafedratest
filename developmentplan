# План разработки

1. Изменить проверку авторизации не по проверке пароля, а по проверке hash 
    1.1. Внедрить метод шифровки toHash в класс Validate Service при помощи Companion object
    1.2. В классе User.kt создать внутренние поля hash и salt и инициализировать их при помощи метода toHash 
    1.3. В классе ValidateService проверять соответствие user.hash и введённого пароля 
2. Для выполнения требования R1.5 определить возможные роли пользователей, а так же добавить ресурсы, к которым у них есть доступ
    2.1. read, write, execute, хранить данные роли в enum списке
    2.2. Роли добавить в User.kt в качестве поля, данное поле будет заполняться из входящей строки
    2.3. Добавить поле resource 
3. Проверять количество входящих параметров строки
    3.1.	Если только –login –pass, то авторизируем пользователя как на первом этапе по hash
    3.2.	Если –login –pass –res – role, то проверять соответствие пользователя роли 
    3.3.	Учесть, что параметры могут передаваться в любом порядке, следовательно, необходимо добавить проверки в Params.kt
4. Ресурсы
    4.1. Все ресурсы будет считать существующими
    4.2. Любой набор символов после –res является существующим путём
    4.3. Исходя из предыдущих пунктов, нам не нужно создавать и хранить список всех существующих ресурсов
    4.4. Доступ к определённому ресурсу даёт доступ к его потомкам
5. Параметры полей
    5.1. –res “String”
    5.2. –role “String”
6. Коды возврата
    6.1. 5 – неизвестная роль
    6.2. 6 – нет доступа
7. Тестовые строки (правильность логина и пароля не проверяем)
    7.1. –login Admin –res A.B.CD – role write – код 0
    7.2. –res A.BC – login User1 – role read – код 0
    7.3. –role execute –res CD.E.B – login Admin – код 0
    7.4. –login User1 – res A – role delete – код 5
    7.5. –login Admin –res B.C – role write – код 6 (у пользователя Admin нет доступа к B.C в поле resource класса User.kt хардкод)
  



